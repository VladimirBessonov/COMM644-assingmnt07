{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/String.ts","src/Task.ts","src/main.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","List","id","text","complete","active","handler","name","prompt","alert","orderNumber","parseInt","surname","fullname","concat","array","split","searchWord","index","indexOf","wordIndex","forEach","item","undefined","sentence","replacement","replace","search","new_string","slice","toLowerCase","trim","toUpperCase","Tasks","taskList","this","list","Task_1","String_1","Model","prototype","bindTodoListChanged","callback","onTodoListChanged","_commit","todos","localStorage","setItem","JSON","stringify","toggleTodo","map","todo","deleteTodo","filter","restartTodos","executeTask","value","activeTask","console","log","selectActiveTask","getItem","parse","View","displayTodos","_this","todoList","firstChild","removeChild","createElement","textContent","restartButton","innerText","append","li","checkbox","type","checked","radio","setAttribute","span","contentEditable","classList","add","strike","deleteButton","getElement","selector","document","querySelector","tag","className","element","_initLocalListeners","input","addEventListener","event","target","_temporaryTodoText","bindSelectActiveTask","parentElement","bindToggleTodo","bindRestartTodo","matches","bindDeleteTodo","bindExecuteTask","execButton","app","placeholder","title","Controller","model","view","handleToggleTodo","handleDeleteTodo","handleRestartTodo","handleActiveTask","handleExecuteTask"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,iEC6FaA,EAAAK,KAAO,CAAC,CAACC,GAAI,EAAGC,KAAM,qKAEJC,UAAU,EAAQC,QAAQ,EAAOC,QA9F3C,WACjB,IAAIC,EAAuBC,OAAO,kBACrB,OAATD,GAAiBE,MAAM,gBAAgBF,EAAKT,OAAM,WA6FtD,CAACI,GAAI,EAAGC,KAAM,qOAE0CC,UAAU,EAAQC,QAAQ,EAAOC,QA5FxE,WACjB,IAAIC,EAAuBC,OAAO,kBAC9BE,EAAeC,SAASH,OAAO,4CACtB,OAATD,IACIG,EAAcH,EAAKT,OACnBW,MAAM,kBAAkBF,EAAKG,EAAc,GAAE,SAC7CD,MAAM,gBAAgBF,EAAKT,OAAM,wDAuFzC,CAACI,GAAI,EAAGC,KAAM,yYAIkCC,UAAU,EAAQC,QAAQ,EAAOC,QAtFhE,WACjB,IAAIC,EAAiBC,OAAO,kBACxBI,EAAoBJ,OAAO,kBAC3BK,EAAWN,EAAKO,OAAO,IAAKF,GAChCH,MAAM,gBAAgBI,KAmFtB,CAACX,GAAI,EAAGC,KAAM,kLAE2BC,UAAU,EAAQC,QAAQ,EAAOC,QAlFzD,WACjB,IACIS,EADWP,OAAO,sCAAuC,+CACxCQ,MAAM,KACvBC,EAAYT,OAAO,mDAAoD,OACvEU,EAAQH,EAAMI,QAAQF,GAC1BR,MAAMS,KA8EN,CAAChB,GAAI,EAAGC,KAAM,uMAEqCC,UAAU,EAAQC,QAAQ,EAAOC,QA5EnE,WACjB,IAGIc,EAFAL,EADWP,OAAO,sCAAuC,+CACxCQ,MAAM,KACvBC,EAAYT,OAAO,mDAAoD,OAE3EO,EAAMM,QAAS,SAACC,EAAMJ,GACdI,IAASL,IACTG,EAAYF,UAIFK,IAAdH,GACAX,MAAM,iBAAiBQ,EAAU,uBAAuBG,KAiE5D,CAAClB,GAAI,EAAGC,KAAM,kTAGoBC,UAAU,EAAQC,QAAQ,EAAOC,QA9DlD,WACjB,IAAIkB,EAAoBhB,OAAO,sCAAuC,gDAClES,EAAsBT,OAAO,mCAAoC,UACrE,GAAiB,iDAAbgB,EAA6D,CAC7D,IAAIC,EAAuBjB,OAAO,qDAClCgB,EAASE,QAAQD,EAAaR,QAE9BR,MAAMe,EAASE,QAAQ,eAAgBT,MAwD3C,CAACf,GAAI,EAAGC,KAAM,8QAGgCC,UAAU,EAASC,QAAQ,EAAOC,QApD/D,WACjB,IAAIkB,EAAoBhB,OAAO,sCAAuC,+CAClES,EAAsBT,OAAO,mDAAoD,OACrFC,MAAMe,EAASG,OAAOV,MAkDtB,CAACf,GAAI,EAAGC,KAAM,+WAIkCC,UAAU,EAAQC,QAAQ,EAAOC,QAlDhE,WACjB,IACIsB,EADsB,8CACWC,QACrCpB,MAAMmB,EAAWC,OAAO,OAgDxB,CAAC3B,GAAI,EAAGC,KAAM,8UAI0BC,UAAU,EAAQC,QAAQ,EAAOC,QA/CxD,WACjB,IAAIkB,EAAoBhB,OAAO,sCAAuC,oEACtEC,MAAMe,EAASM,cAAcC,UA8C7B,CAAC7B,GAAI,GAAIC,KAAM,uRAGiCC,UAAU,EAAQC,QAAQ,EAAOC,QA7C/D,WAElBG,MAD0B,8CACTuB,wGCtFjB,SAFJC,EAEgBC,GACRC,KAAKC,KAAQF,EAHRtC,EAAAqC,MAAAA,wFCAb,IAAAI,EAAA/C,EAAA,UACAgD,EAAAhD,EAAA,YAEAiD,GASIA,EAAAC,UAAAC,oBAAA,SAAoBC,GAChBP,KAAKQ,kBAAoBD,GAG7BH,EAAAC,UAAAI,QAAA,SAAQC,GACJV,KAAKQ,kBAAkBE,GACvBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,KAGjDN,EAAAC,UAAAU,WAAA,SAAWhD,GACPiC,KAAKU,MAAQV,KAAKU,MAAMM,IAAI,SAAAC,GACxB,OAAAA,EAAKlD,KAAOA,EAAK,CAAEA,GAAIkD,EAAKlD,GAAIC,KAAMiD,EAAKjD,KAAME,OAAQ+C,EAAK/C,OAAQD,UAAWgD,EAAKhD,SAAUE,QAAS8C,EAAK9C,SAAY8C,IAG9HjB,KAAKS,QAAQT,KAAKU,QAGtBN,EAAAC,UAAAa,WAAA,SAAWnD,GACPiC,KAAKU,MAAQV,KAAKU,MAAMS,OAAO,SAAAF,GAAQ,OAAAA,EAAKlD,KAAOA,IAEnDiC,KAAKS,QAAQT,KAAKU,QAGtBN,EAAAC,UAAAe,aAAA,WACIpB,KAAKU,MAAS,IAAIR,EAAAJ,MAAMK,EAAArC,MAAMmC,KAC9BD,KAAKS,QAAQT,KAAKU,QAGtBN,EAAAC,UAAAgB,YAAA,SAAYC,GACR,GAAwB,OAApBtB,KAAKuB,WAAqB,CAC1B,IAAIpD,EAAU6B,KAAKU,MAAMV,KAAKuB,WAAa,GAAGpD,QAC9CqD,QAAQC,IAAItD,GACZA,EAAQmD,KAIhBlB,EAAAC,UAAAqB,iBAAA,SAAiB3D,GACbiC,KAAKuB,WAAaxD,GAG1BqC,GA7CI,SAAAA,IACQJ,KAAKU,MAA0C,OAAlCC,aAAagB,QAAQ,SAAoBd,KAAKe,MAAMjB,aAAagB,QAAQ,UAAa,IAAIzB,EAAAJ,MAAMK,EAAArC,MAAMmC,KACnHD,KAAKuB,WAAa,KA6C9B,IAAAM,GAuBIA,EAAAxB,UAAAyB,aAAA,SAAapB,GAET,IAFJ,IAAAqB,EAAA/B,KAEWA,KAAKgC,SAASC,YACjBjC,KAAKgC,SAASE,YAAYlC,KAAKgC,SAASC,YAI5C,GAAqB,IAAjBvB,EAAM/C,OAAc,CACpB,IAAMH,EAAIwC,KAAKmC,cAAc,KAC7B3E,EAAE4E,YAAc,6BAChB,IAAMC,EAAgBrC,KAAKmC,cAAc,UACzCE,EAAcC,UAAY,UAC1BtC,KAAKgC,SAASO,OAAO/E,EAAG6E,QAIxB3B,EAAMxB,QAAQ,SAAA+B,GACV,IAAMuB,EAAKT,EAAKI,cAAc,MAC9BK,EAAGzE,GAAKkD,EAAKlD,GAEb,IAAM0E,EAAiBV,EAAKI,cAAc,SAC1CM,EAASC,KAAO,WAChBD,EAASE,QAAU1B,EAAKhD,SACxB,IAAM2E,EAAcb,EAAKI,cAAc,SACvCS,EAAMF,KAAO,QACbE,EAAMC,aAAa,OAAQ,gBAC3BD,EAAMD,QAAU1B,EAAK/C,OAErB,IAAM4E,EAAaf,EAAKI,cAAc,QAItC,GAHAW,EAAKC,iBAAkB,EACvBD,EAAKE,UAAUC,IAAI,YAEfhC,EAAKhD,SAAU,CACf,IAAMiF,EAASnB,EAAKI,cAAc,KAClCe,EAAOd,YAAcnB,EAAKjD,KAC1B8E,EAAKP,OAAOW,QAEZJ,EAAKV,YAAcnB,EAAKjD,KAG5B,IAAMmF,EAAepB,EAAKI,cAAc,SAAU,UAClDgB,EAAaf,YAAc,SAC3BI,EAAGD,OAAOK,EAAOH,EAAUK,EAAMK,GAGjCpB,EAAKC,SAASO,OAAOC,KAI7BhB,QAAQC,IAAIf,IAGhBmB,EAAAxB,UAAA+C,WAAA,SAAWC,GAGP,OAFgBC,SAASC,cAAcF,IAI3CxB,EAAAxB,UAAA8B,cAAA,SAAcqB,EAAaC,GACvB,IAAMC,EAAUJ,SAASnB,cAAcqB,GAIvC,OAFIC,GAAWC,EAAQV,UAAUC,IAAIQ,GAE9BC,GAGX7B,EAAAxB,UAAAsD,oBAAA,WAAA,IAAA5B,EAAA/B,KACIA,KAAK4D,MAAMC,iBAAiB,QAAS,SAAAC,GACjC,IAAI9F,EAAO8F,EAAMC,OAAOzC,MACxBS,EAAKiC,mBAAqBhG,KAgBlC6D,EAAAxB,UAAA4D,qBAAA,SAAqB9F,GACjB6B,KAAKgC,SAAS6B,iBAAiB,SAAU,SAAAC,GACrC,GAA0B,UAAtBA,EAAMC,OAAOrB,KAAkB,CAC/B,IAAM3E,EAAKS,SAASsF,EAAMC,OAAOG,cAAcnG,IAC/CI,EAAQJ,OAKpB8D,EAAAxB,UAAA8D,eAAA,SAAehG,GACX6B,KAAKgC,SAAS6B,iBAAiB,SAAU,SAAAC,GACrC,GAA0B,aAAtBA,EAAMC,OAAOrB,KAAqB,CAClC,IAAM3E,EAAKS,SAASsF,EAAMC,OAAOG,cAAcnG,IAC/CI,EAAQJ,OAKpB8D,EAAAxB,UAAA+D,gBAAA,SAAgBjG,GACZ6B,KAAKgC,SAAS6B,iBAAiB,QAAS,SAAAC,GAChCA,EAAMC,OAAOM,QAAQ,WAAuC,WAA1BP,EAAMC,OAAOzB,YAC/Cd,QAAQC,IAAI,eACZtD,QAKZ0D,EAAAxB,UAAAiE,eAAA,SAAenG,GACX6B,KAAKgC,SAAS6B,iBAAiB,QAAS,SAAAC,GACpC,GAA+B,WAA3BA,EAAMC,OAAON,UAAwB,CACrC,IAAM1F,EAAKS,SAASsF,EAAMC,OAAOG,cAAcnG,IAC/CyD,QAAQC,IAAI,cACZtD,EAAQJ,OAKpB8D,EAAAxB,UAAAkE,gBAAA,SAAgBpG,GACZ6B,KAAKwE,WAAWX,iBAAiB,QAAS,SAACC,GAMnC3F,OAKhB0D,GArJI,SAAAA,IACI7B,KAAKyE,IAAOzE,KAAKoD,WAAW,SAC5BpD,KAAK4D,MAAQ5D,KAAKmC,cAAc,SAChCnC,KAAK4D,MAAMlB,KAAO,OAClB1C,KAAK4D,MAAMc,YAAc,cACzB1E,KAAK4D,MAAMxF,KAAO,OAClB4B,KAAKwE,WAAaxE,KAAKmC,cAAc,UACrCnC,KAAKwE,WAAWlC,UAAY,eAC5BtC,KAAK2E,MAAQ3E,KAAKmC,cAAc,MAChCnC,KAAK2E,MAAMvC,YAAc,eACzBpC,KAAKgC,SAAWhC,KAAKmC,cAAc,KAAM,aAEzCnC,KAAKyE,IAAIlC,OAAOvC,KAAKwE,WAAYxE,KAAK2E,MAAO3E,KAAKgC,UAClDhC,KAAKgE,mBAAqB,GAC1BhE,KAAK2D,sBAyIb,IAAAiB,EAGI,SAAYC,EAAeC,GAA3B,IAAA/C,EAAA/B,KAcAA,KAAAQ,kBAAoB,SAAAE,GAChBqB,EAAK+C,KAAKhD,aAAapB,IAG3BV,KAAA+E,iBAAmB,SAAAhH,GACfgE,EAAK8C,MAAM9D,WAAWhD,IAE1BiC,KAAAgF,iBAAmB,SAAAjH,GACfgE,EAAK8C,MAAM3D,WAAWnD,IAE1BiC,KAAAiF,kBAAoB,WAChBlD,EAAK8C,MAAMzD,gBAGfpB,KAAAkF,iBAAmB,SAAAnH,GACfgE,EAAK8C,MAAMnD,iBAAiB3D,IAEhCiC,KAAAmF,kBAAoB,SAAA7D,GAChBS,EAAK8C,MAAMxD,YAAYC,IA/BvBtB,KAAK6E,MAAQA,EACb7E,KAAK8E,KAAOA,EAEZ9E,KAAK6E,MAAMvE,oBAAoBN,KAAKQ,mBACpCR,KAAK8E,KAAKX,eAAenE,KAAK+E,kBAC9B/E,KAAK8E,KAAKR,eAAetE,KAAKgF,kBAC9BhF,KAAK8E,KAAKV,gBAAgBpE,KAAKiF,mBAC/BjF,KAAK8E,KAAKb,qBAAqBjE,KAAKkF,kBACpClF,KAAK8E,KAAKP,gBAAgBvE,KAAKmF,mBAE/BnF,KAAKQ,kBAAkBR,KAAK6E,MAAMnE,QA2B7BjD,EAAAgH,IAAM,IAAIG,EAAW,IAAIxE,EAAS,IAAIyB","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","//STEP 1\nconst handlerStep1 = () => {\n    let name : string | null = prompt('Enter you Name')\n    if (name !== null) { alert(`Your name is ${name.length} long`)}\n}\n//STEP 2\nconst handlerStep2 = () => {\n    let name : string | null = prompt('Enter you Name')\n    let orderNumber  = parseInt(prompt('Enter number of letter you want to find')!)\n    if (name !== null) {\n        if (orderNumber < name.length) {\n            alert(`The letter is  ${name[orderNumber - 1]} long`)} else {\n            alert(`Your name is ${name.length} character long, the letter is out of the range. `)\n        }\n        }\n}\n//STEP 3\nconst handlerStep3 = () => {\n    let name : string  = prompt('Enter you Name')!\n    let surname : string  = prompt('Enter you Name')!\n    let fullname = name.concat(' ', surname)\n    alert(`Your name is ${fullname}`)\n}\n//STEP 4\nconst handlerStep4 = () => {\n    let sentence = prompt('enter you sentence or leave default', 'The quick brown fox jumps over the lazy dog')!\n    let array = sentence.split(' ')\n    let searchWord= prompt('enter the word to find it index or leave default', 'fox')!\n    let index = array.indexOf(searchWord)\n    alert(index)\n\n}\n//STEP 5\nconst handlerStep5 = () => {\n    let sentence = prompt('enter you sentence or leave default', 'The quick brown fox jumps over the lazy fox')!\n    let array = sentence.split(' ')\n    let searchWord= prompt('enter the word to find it index or leave default', 'fox')!\n    let wordIndex: number | undefined;\n    array.forEach( (item, index) => {\n        if (item === searchWord) {\n            wordIndex = index\n        }\n    })\n\n    if (wordIndex !== undefined) {\n        alert(`last index of ${searchWord} in the sentence is ${wordIndex}`)\n    }\n\n}\n\n//STEP 6\nconst handlerStep6 = () => {\n    let sentence : string = prompt('enter you sentence or leave default', 'The quick brown fox jumped over the lazy dog')!\n    let searchWord : string = prompt('enter your name or leave default', 'monkey')!\n    if (sentence !== 'The quick brown fox jumped over the lazy dog') {\n        let replacement : string = prompt('what you want to replace in the entered sentence?')!\n        sentence.replace(replacement, searchWord)\n    } else {\n        alert(sentence.replace('the lazy dog', searchWord))\n    }\n\n}\n\n//STEP 7\n\nconst handlerStep7 = () => {\n    let sentence : string = prompt('enter you sentence or leave default', 'The quick brown fox jumps over the lazy dog')!\n    let searchWord : string = prompt('enter the word to find it index or leave default', 'fox')!\n    alert(sentence.search(searchWord))\n\n}\n//STEP 8\nconst handlerStep8 = () => {\n    let old_string : string = \"The quick brown fox jumps over the lazy dog\"\n    let new_string : string = old_string.slice()\n    alert(new_string.slice(-12))\n}\n\n\n//STEP 9\nconst handlerStep9 = () => {\n    let sentence : string = prompt('enter you sentence or leave default', '           THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG          ')!\n    alert(sentence.toLowerCase().trim())\n\n}\n//STEP 10\nconst handlerStep10 = () => {\n    let old_string : string = \"The quick brown fox jumps over the lazy dog\"\n    alert(old_string.toUpperCase())\n}\n\n\n\nexport const List = [{id: 1, text: 'Create an application that prompts the user for their name. Then, find the ' +\n        'length of characters in the person’s name.  Use the alert method to ' +\n        'display the result.', complete: false,  active: false, handler: handlerStep1 },\n    {id: 2, text: 'Create an application that prompts the user for their name. Then, prompt the user for ' +\n            'a numeric value so that they can find the letter in the string based on the number they specify.' +\n            ' Use the alert method to display the result.', complete: false,  active: false, handler: handlerStep2},\n    {id: 3, text: 'Create an application that prompts the user for their first name. Then, prompt the user for ' +\n            'their last name using a second prompt. Use the alert method to display the text \"Your name is: \"' +\n            ' along with the result of the first name and last name concatenated together. You will use a concatenation ' +\n            'operator to concatenate the literal string with the result ' +\n            'of the String object method’s result', complete: false,  active: false, handler: handlerStep3},\n    {id: 4, text: 'Create an application that stores the text “The quick brown fox jumps over the lazy dog” ' +\n            'within a variable. Then, find and display within an alert' +\n            ' the index of the word “fox”.', complete: false,  active: false, handler: handlerStep4} ,\n    {id: 5, text: 'Create an application that stores the text “The quick brown fox jumps over the lazy fox” ' +\n            'within a variable. Then, find and display within an alert the index ' +\n            'of the last instance of the word “fox”.', complete: false,  active: false, handler: handlerStep5},\n    {id: 6, text: 'Create an application that stores the text “The quick brown fox jumped over the lazy dog” ' +\n            'within a variable. Then, prompt the user for their full name. Then, replace the text “the lazy' +\n            ' dog” in the variable with the name that the user enters within the prompt. Use the alert method ' +\n            'to display the result.', complete: false,  active: false, handler: handlerStep6},\n    {id: 7, text: 'Create an application that stores the text “The quick brown fox jumps over the lazy dog” ' +\n            'within a variable. Then, prompt the user for a word. Next, search for the word within the string ' +\n            'that the user enters into the prompt. Use the ' +\n            'alert method to display the result.',complete: false,   active: false, handler: handlerStep7},\n    {id: 8, text: 'Create an application that stores the text “The quick brown fox jumps over the lazy dog” ' +\n            'within a variable called old_string. Then, use slice(), substr(), or substring() to extract the ' +\n            'words “the lazy dog” from the old_string variable and store that result in a second variable' +\n            ' called new_string. Use the alert method to display' +\n            ' the uppercase result of new_string.', complete: false,  active: false, handler: handlerStep8},\n    {id: 9, text: 'Create an application that stores the text “            ' +\n            'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG          ” ' +\n            'within a variable. Make sure to add space before and after the text so that appears very similar' +\n            ' to the text here. Use the alert method to display the lowercase result of the variable once the' +\n            ' space has been trimmed off.', complete: false,  active: false, handler: handlerStep9},\n    {id: 10, text: 'Create an application that stores the text “the quick brown fox jumps over the lazy dog”' +\n            ' within a variable. The user clearly forgot to capitalize the first letter in the sentence. ' +\n            'Programmatically capitalize the first letter in the sentence' +\n            ' and display the result in an alert.', complete: false,  active: false, handler: handlerStep10},\n]\n\n\n\n","export class Tasks {\n    list :  Array<{id: number, text: string, complete: false, active: boolean, handler: (any) => void}>\n    constructor(taskList) {\n        this.list  = taskList\n    }\n\n}","import { Tasks} from \"./Task\";\nimport { List } from \"./String\";\n\nclass Model {\n    todos: any\n    onTodoListChanged : any\n    activeTask: number | null\n    constructor() {\n            this.todos = localStorage.getItem('todos') !== null ? JSON.parse(localStorage.getItem('todos')!) : new Tasks(List).list   // saying localStorage.getItem('todos') is not null\n            this.activeTask = null\n    }\n\n    bindTodoListChanged(callback) {\n        this.onTodoListChanged = callback\n    }\n\n    _commit(todos : any) {\n        this.onTodoListChanged(todos)\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }\n\n    toggleTodo(id) {\n        this.todos = this.todos.map(todo =>\n            todo.id === id ? { id: todo.id, text: todo.text, active: todo.active, complete: !todo.complete, handler: todo.handler } : todo\n        )\n\n        this._commit(this.todos)\n    }\n\n    deleteTodo(id) {\n        this.todos = this.todos.filter(todo => todo.id !== id)\n\n        this._commit(this.todos)\n    }\n\n    restartTodos() {\n        this.todos =  new Tasks(List).list\n        this._commit(this.todos)\n    }\n\n    executeTask(value) {\n        if (this.activeTask !== null) {\n            let handler = this.todos[this.activeTask - 1].handler\n            console.log(handler)\n            handler(value)\n        }\n    }\n\n    selectActiveTask(id: number) {\n        this.activeTask = id\n    }\n\n}\n\nclass View {\n    app: any // add later type of DOM element\n    input : any // add later type of DOM element\n    todoList: any // add later type of DOM element\n    execButton: any\n    title: any\n    _temporaryTodoText : string\n    constructor() {\n        this.app =  this.getElement('#root')\n        this.input = this.createElement('input')\n        this.input.type = 'text'\n        this.input.placeholder = 'Enter here '\n        this.input.name = 'todo'\n        this.execButton = this.createElement('button')\n        this.execButton.innerText = 'EXECUTE TASK'\n        this.title = this.createElement('h1')\n        this.title.textContent = 'JS Practices'\n        this.todoList = this.createElement('ul', 'todo-list')\n\n        this.app.append(this.execButton, this.title, this.todoList)\n        this._temporaryTodoText = ''\n        this._initLocalListeners()\n    }\n    displayTodos(todos) {\n        // Delete all nodes\n        while (this.todoList.firstChild) {\n            this.todoList.removeChild(this.todoList.firstChild)\n        }\n\n        // Show default message\n        if (todos.length === 0) {\n            const p = this.createElement('p')\n            p.textContent = 'Nothing to do! Start over?'\n            const restartButton = this.createElement('button')\n            restartButton.innerText = 'RESTART'\n            this.todoList.append(p, restartButton)\n\n        } else {\n            // Create nodes\n            todos.forEach(todo => {\n                const li = this.createElement('li')\n                li.id = todo.id\n\n                const checkbox : any = this.createElement('input')\n                checkbox.type = 'checkbox'\n                checkbox.checked = todo.complete\n                const radio : any = this.createElement('input')\n                radio.type = 'radio'\n                radio.setAttribute(\"name\", \"taskSelector\");\n                radio.checked = todo.active\n\n                const span : any = this.createElement('span')\n                span.contentEditable = true\n                span.classList.add('editable')\n\n                if (todo.complete) {\n                    const strike = this.createElement('s')\n                    strike.textContent = todo.text\n                    span.append(strike)\n                } else {\n                    span.textContent = todo.text\n                }\n\n                const deleteButton = this.createElement('button', 'delete')\n                deleteButton.textContent = 'Delete'\n                li.append(radio, checkbox, span, deleteButton)\n\n                // Append nodes\n                this.todoList.append(li)\n            })\n        }\n        // Debugging\n        console.log(todos)\n    }\n\n    getElement(selector: string) {\n        const element = document.querySelector(selector)\n\n        return element\n    }\n    createElement(tag: string, className? : string) {\n        const element = document.createElement(tag)\n\n        if (className) element.classList.add(className)\n\n        return element\n    }\n\n    _initLocalListeners() {\n        this.input.addEventListener('input', event => {\n            let text = event.target.value\n            this._temporaryTodoText = text\n        })\n        // this.todoList.addEventListener('input', event => {\n        //     if (event.target.className === 'editable') {\n        //         this._temporaryTodoText = event.target.innerText\n        //     }\n        // })\n        // this.todoList.addEventListener('click', event => {\n        //     const {target} = event\n        //     if (target.matches('button')) {\n        //  // this.displayTodos()\n        //     }\n        // })\n\n    }\n\n    bindSelectActiveTask(handler) {\n        this.todoList.addEventListener('change', event => {\n            if (event.target.type === 'radio') {\n                const id = parseInt(event.target.parentElement.id)\n                handler(id)\n            }\n        })\n    }\n\n    bindToggleTodo(handler) {\n        this.todoList.addEventListener('change', event => {\n            if (event.target.type === 'checkbox') {\n                const id = parseInt(event.target.parentElement.id)\n                handler(id)\n            }\n        })\n    }\n\n    bindRestartTodo(handler) {\n        this.todoList.addEventListener('click', event => {\n            if (event.target.matches('button') && event.target.innerText == 'RESTART') {\n                console.log('RestartTodo')\n                handler()\n            }\n        })\n    }\n\n    bindDeleteTodo(handler) {\n        this.todoList.addEventListener('click', event => {\n            if (event.target.className === 'delete') {\n                const id = parseInt(event.target.parentElement.id)\n                console.log('DeleteTodo')\n                handler(id)\n            }\n        })\n    }\n\n    bindExecuteTask(handler) {\n        this.execButton.addEventListener('click', (event) => {\n            // if (event.key === 'Enter') {\n            //     if (this._temporaryTodoText !== '') {\n            //         handler(this._temporaryTodoText)\n            //     }\n                // code for enter}\n                handler()\n\n        })\n    }\n\n}\n\nclass Controller {\n    model: Model\n    view: View\n    constructor(model : Model, view: View) {\n        this.model = model\n        this.view = view\n\n        this.model.bindTodoListChanged(this.onTodoListChanged)\n        this.view.bindToggleTodo(this.handleToggleTodo)\n        this.view.bindDeleteTodo(this.handleDeleteTodo)\n        this.view.bindRestartTodo(this.handleRestartTodo)\n        this.view.bindSelectActiveTask(this.handleActiveTask)\n        this.view.bindExecuteTask(this.handleExecuteTask)\n\n        this.onTodoListChanged(this.model.todos)\n\n    }\n    onTodoListChanged = todos => {\n        this.view.displayTodos(todos)\n    }\n\n    handleToggleTodo = id => {\n        this.model.toggleTodo(id)\n    }\n    handleDeleteTodo = id => {\n        this.model.deleteTodo(id)\n    }\n    handleRestartTodo = () => {\n        this.model.restartTodos()\n    }\n\n    handleActiveTask = id => {\n        this.model.selectActiveTask(id)\n    }\n    handleExecuteTask = value => {\n        this.model.executeTask(value)\n    }\n\n\n}\n\nexport const app = new Controller(new Model(), new View())"]}